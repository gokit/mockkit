package static


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
)

type fileData struct{
  path string
  root string
  data []byte
}

var (
  assets = map[string][]string{
    
      ".tml": []string{  // all .tml assets.
        
          "impl-only.tml",
        
          "impl.tml",
        
          "mock.tml",
        
      },
    
  }

  assetFiles = map[string]fileData{
    
      
        "impl-only.tml": { // all .tml assets.
          data: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xcd\x8e\xd4\x30\x10\x84\xef\x79\x8a\x3a\xcc\x61\xf7\xe2\xe5\x8c\xc4\x81\x03\x48\x23\x01\x5a\xa1\x7d\x01\x8f\xd3\x49\xac\x71\x9c\xe0\xee\xec\x32\xb2\xfc\xee\xc8\x89\xa3\xcc\xce\x8f\x80\x63\xe2\xea\xaf\xbb\xab\xec\x18\x77\x7b\x2f\x14\x1a\x6d\xe8\x87\xee\x09\x1f\x3f\x41\xbd\xff\x93\x52\x15\xe3\xee\x59\x9b\xa3\x6e\x37\xcd\xf3\xb1\x55\xe5\x5f\x56\x54\x4f\x4f\x88\xf1\x7d\x65\x4a\xfb\x7e\x74\xa8\xa9\xb1\x9e\x18\x1a\x8e\xda\x01\x07\x37\x98\x23\x58\xc2\x64\x04\x6f\x9d\x35\x1d\x98\xc2\xab\x35\xc4\x90\x8e\xd0\x93\x74\x43\xcd\xa5\xac\xce\xe0\xc3\x69\x3e\xb9\xe6\xc3\xae\xdf\xd0\x0c\xcd\x6c\x5b\xaf\x0f\x8e\xd0\x58\x72\x35\x2b\xbc\x74\xc4\x84\x66\xf2\x46\xec\xe0\x19\x3a\x10\x8c\x76\x6e\xe1\xbe\x75\xe4\x67\x72\x20\x1e\xc9\x88\x7d\x3d\xd7\x0e\xcd\x7c\x56\x26\xb5\x5c\x0a\x55\x25\xa7\xf1\xd6\x30\xf3\xb2\x8b\x3a\x56\x00\x10\x23\x82\xf6\x2d\x41\x7d\x2f\x3b\xa5\x54\x0e\xd4\x52\xf2\x75\xf2\x66\xee\xf8\x10\xa3\xfa\xf2\xfb\x73\x68\xa7\x9e\xbc\x7c\xb3\x2c\x90\x30\x11\xce\x6d\x4f\xe9\x11\x8b\xee\x27\xc9\x14\xfc\x5d\xd5\xda\x9c\x7c\x9d\x3b\xa6\xaa\xba\x39\xc9\x92\xd8\x6a\x64\x3f\x3a\xca\xbd\xb9\x58\xbd\xbb\xd8\x4e\x6d\xda\x25\x21\x34\x43\xb8\xa1\xdb\x22\x51\xb9\xc3\x5e\x66\xdb\xee\x51\xb3\x67\xea\xc2\x8e\x1c\x1d\x26\x5f\x53\xf0\xa4\xa5\x53\x55\x36\x08\x0f\x79\xc2\x3b\x84\xc7\x6d\x91\x7f\x35\x32\x46\xdb\xc0\x0f\x42\xbf\x26\xed\xa0\x5e\x06\xd1\x6e\xb1\x95\xf1\x01\x2b\xe7\x2f\x46\xc7\x48\xbe\x4e\x29\x2e\x34\xea\x47\x39\x41\x2d\x35\x59\xc1\xb9\xb0\x44\x6e\xaf\x16\xcd\x1d\xd6\x39\xcf\xd4\x6b\x7a\xe4\x98\xb6\xeb\x72\x05\xcd\x6f\xf0\x3f\x99\x61\x66\xdc\xa4\x95\x45\xaa\xfc\xd2\xcb\xb5\xf9\x13\x00\x00\xff\xff\xa7\xf8\x66\xcd\x19\x04\x00\x00"),
          path: "impl-only.tml",
          root: "impl-only.tml",
        },
      
        "impl.tml": { // all .tml assets.
          data: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x31\x8f\xdb\x30\x0c\x85\x77\xfd\x8a\x37\xdc\x90\x2c\xba\xbd\x40\x87\x2e\x05\x02\xb4\x1d\x8a\xfe\x01\x45\xa6\x63\xa1\xb2\x6c\x88\xf4\x1d\x02\x41\xff\xbd\x90\xa5\x34\xb9\xc4\x19\x6e\x8c\xf8\xf8\x91\x7c\x2f\x4e\xe9\xe5\x10\x84\x62\x6f\x2c\xfd\x32\x23\xe1\xcb\x57\xe8\x8f\x2f\x39\x2b\xf5\xfa\x8a\x94\x3e\xbe\xe7\x7c\x18\x67\x8f\x8e\x7a\x17\x88\x61\xe0\xe9\x34\xe1\xe8\x27\xfb\x17\x2c\x71\xb1\x82\xf7\xc1\xd9\x01\x4c\xf1\xcd\x59\x62\xc8\x40\x18\x49\x86\xa9\xe3\xd6\xd6\x15\xf0\xf1\xbc\x56\x1e\xf9\x70\x97\xdf\x30\x0c\xc3\xec\x4e\xc1\x1c\x3d\xa1\x77\xe4\x3b\xd6\xf8\x33\x10\x13\xfa\x25\x58\x71\x53\x60\x98\x48\xb0\xc6\xfb\xca\x7d\x1f\x28\xac\xe4\x48\x3c\x93\x15\xf7\x76\xab\x9d\xfa\xb5\xd6\x36\x75\xdc\x1a\xb5\x92\xf3\xbc\xb5\xcc\x7a\x6c\x55\x27\x05\x00\x29\x21\x9a\x70\x22\xe8\x9f\xed\xa6\x9c\x5b\x41\xd7\x96\xef\x4b\xb0\xeb\xc4\x5d\x4a\xfa\x5b\x3c\x2d\x23\x05\xf9\xe1\x58\x20\x71\xa1\x9c\xf7\x28\x85\xdf\x24\x4b\x0c\xb7\xcf\x17\x3c\x85\xae\x30\xb3\x52\x9b\xb3\x6a\x26\x17\xab\xc6\xd9\x53\xe1\x73\x33\xf3\xe5\x6e\x7f\x7d\xd5\xd6\x0c\xd0\x4f\x71\x43\x77\x35\x5d\x97\x09\x07\x59\x8d\x79\x46\x2d\xae\xe8\xbb\x83\x4b\x38\x58\x42\x47\x31\x90\x91\x41\xab\x62\x01\x76\x65\xc3\x27\x84\xfd\xf5\x90\xa7\x56\xa5\xe4\x7a\x84\x49\x68\x9c\xe5\x8c\xdd\xbd\x6d\xfb\xda\xfa\x68\x66\x4a\x14\xba\x9c\x53\x05\xd4\xee\x26\x2b\x13\xb9\x68\x5b\x70\xee\xe1\x98\xdb\x6d\x6e\xd4\x97\x84\xc8\x33\x5d\x43\x7f\x80\x96\x6f\xe9\x93\xcc\xb8\x32\x36\x69\xed\x10\x95\xd5\xff\xbf\xc6\xbf\x00\x00\x00\xff\xff\xb0\x40\x9b\x11\xbd\x03\x00\x00"),
          path: "impl.tml",
          root: "impl.tml",
        },
      
        "mock.tml": { // all .tml assets.
          data: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\xdf\x8b\xe3\x36\x10\x7e\x5f\xd8\xff\x61\xee\xe8\x83\x5d\x52\x67\xfb\x7a\x25\x0f\x47\x9b\x85\x42\x6f\x29\xdd\x83\x3e\x2c\x4b\x51\xec\x71\x2c\xd6\x96\x8c\x24\x27\x9b\x0a\xff\xef\x65\x24\x39\xfe\x11\x3b\xec\xb5\x14\xda\xf3\x4b\xf0\x68\x34\x33\xfa\xf4\xcd\x37\xce\xed\x8d\xb5\xdf\xfc\x2c\x0c\xaa\x9c\xa5\xf8\xc0\x2a\x84\x0f\x1b\x48\xc6\x96\xb6\xbd\xbd\x21\x47\x50\x4c\xec\x11\x92\x4f\x68\x0a\x99\x69\x67\x5f\xaf\xc1\xbf\xfe\xc8\xca\xf2\x5e\x2a\x6b\x13\xda\xd3\xb6\x90\x61\xce\x05\x6a\x60\x60\x4e\x35\xc2\xb1\xe0\x69\x01\x85\x2c\x33\x0d\x15\x1a\xf6\x5d\x86\x86\xf1\x52\x03\xdb\xc9\xc6\x80\x29\x10\xf6\xfc\xc0\xc5\x1e\x52\x56\x92\x59\x6b\x99\x72\x66\x30\x73\x49\x8e\xdc\x14\xce\x69\x5a\x6f\xdb\x26\xe7\x9c\x51\x4c\xa1\x0b\x99\x25\xb7\x37\x2e\xe9\x42\x69\xda\xa8\x26\x35\xf6\xf6\x06\x00\xe0\xf7\x02\x05\x18\x5e\x61\xf2\x99\x57\xe8\x6d\x8f\x86\x29\x33\x35\x6e\x45\x36\x34\x79\xe3\x7a\x0d\x3f\x85\x83\xc8\x1c\x6a\x26\x78\x0a\x3c\x07\xdd\xa4\x05\xc8\x34\x6d\x94\x4e\xbc\xe3\xaf\xb4\xf4\x68\x58\xfa\x02\x4f\xcf\xbb\x93\xc1\x81\x79\xab\x94\x54\xc0\xbb\x63\xd9\x76\x10\xfd\xa3\xda\x37\x15\x0a\x03\x07\x56\x36\xd8\x45\xeb\x2f\xe3\xa3\xda\xfb\x9b\xf0\xe6\x94\xd5\xdc\xb0\x92\xff\x89\xd0\x9d\xd6\xda\x64\xfb\xfa\xf9\x54\x63\xef\x85\x22\x6b\x87\x49\x7e\x43\xd3\x28\xb1\x94\xc2\xaf\x7e\x79\x16\x08\x69\x5c\x26\x22\x0a\x33\x69\xd1\x9d\x47\x83\x0a\x61\x8d\x6a\x70\x9d\xb3\x52\x23\x21\x57\x2b\x79\xe0\x19\x2a\x90\xa6\x40\x15\xcd\xdf\x60\x0c\xec\x1c\xc6\x85\xf6\x95\x43\x45\x19\xc0\x14\x5c\x03\xbe\x72\x6d\x88\x4e\xec\x02\xc0\xbc\x11\x29\x44\xd5\x12\x3d\xe2\x49\xa1\x91\xab\x64\xd1\x79\x27\x65\x09\xf6\xea\xb5\xd0\xc3\x73\x78\xa7\x30\x2f\x31\x35\x5c\x8a\xc4\xa5\xd8\x96\x48\x19\xa2\x0a\x93\x39\x4c\x57\x1e\x83\x85\x35\x82\x2d\xb6\x7d\x02\x7a\x3c\xa4\xe0\xc0\xec\x57\x46\x17\x72\x2e\x2a\xf8\x52\x18\x77\x45\x83\xe5\x70\x5f\xd6\x26\x93\x56\xfb\x24\xd3\x97\xf9\xc6\xe6\x55\xed\x0f\x43\x76\xdf\x5f\xe7\x9e\x75\xc1\xaa\x20\x1a\xb9\x54\xa1\x8f\xa7\xc1\x81\x69\xc8\x39\x92\x40\xf8\x98\xac\x2c\xe5\x51\xc3\x49\x36\x1d\x2b\xfa\x34\x8c\x50\xa4\x9e\x73\xc1\x4d\x81\x1a\x81\xee\xd5\x9b\x8d\x3c\xef\xc8\x4b\x7c\xe5\xbb\x12\xc1\xa0\xe3\x43\x27\x0d\x0b\x87\x1b\x49\xc3\xbc\xe4\xf9\x95\x70\x0f\x3d\x2b\x34\x3c\x3d\xcf\x73\xe4\x02\xfe\xeb\x7a\xda\xeb\xd4\x00\xd4\x37\x4b\xdf\x00\xe0\x0b\xef\x8e\xfa\x14\x17\xbe\xbd\x74\x20\x04\xe2\x3e\x7f\x64\x6d\xd2\x75\xc1\x2f\x5c\x1b\xc7\x15\xa2\xfc\x42\x57\xae\x00\x49\xc8\xe2\xae\x1b\x0e\x4c\x39\x31\x5f\x6c\x1e\xcf\x34\x72\xf5\x6e\x89\xd3\xe2\x8d\x57\xd9\x07\x79\x8c\xe2\xd1\xaa\x57\xe5\xcd\xd0\xb9\xdb\xbf\xd0\x78\xc1\x73\x56\xb0\x36\xb0\x7c\x41\x7d\xfd\xb9\x6c\x44\xe6\x7a\xdc\xdb\x08\xdd\x3f\x56\x50\x4b\xad\x89\x55\x74\x22\x9a\x98\x3e\x39\xe1\x9a\xcc\x51\xc3\x8e\x74\x60\xb8\x39\x99\x68\x8d\xaf\x78\xda\xd7\xbe\x8a\x4d\x68\xd6\xe1\xca\xb2\x4a\x0f\x9f\xeb\x38\x8c\xea\x99\xf3\xb9\x48\x39\xc6\x69\x92\x65\x30\xd2\x26\xb1\xfb\x95\xe5\x8d\x7e\x44\xce\x6d\x74\x2b\xe3\x8d\x3b\x85\xec\xe5\x42\xe8\xda\x09\xab\xb6\x1e\xbb\x09\xa9\x78\x1e\x60\x1d\x60\x1d\x34\xd1\xef\x5b\x81\xe0\xe5\x24\xe2\xc4\xc1\xf1\x5d\x27\x0f\x78\x8c\xde\x0b\xe9\xc7\x0f\xcd\x1c\x85\xba\x96\x82\x24\x89\x32\xbc\x8f\x2f\x05\x76\x56\x5e\x1f\x05\xa7\xf9\xf5\xb5\x0a\x6c\x38\xde\xbf\x29\xb1\xe1\xf5\x9e\x64\x8e\xaa\x5d\x96\x30\x6b\x43\xc7\x0c\xcd\xff\x1b\xa5\xf6\x50\xbe\x45\xab\xad\xe5\x39\x08\x69\xb0\xaa\xcd\x09\xa2\xe9\xa1\x63\xbf\xf5\x12\x8a\xf0\x91\xf8\x25\x52\x4e\x8e\x19\xe6\xa8\x3c\xf4\xf1\x58\xf5\x50\x29\xa7\x94\x98\xca\x03\xaa\x28\xfe\xc1\x59\xde\x6d\xa8\xcb\x60\xa2\x77\x46\xb1\xd4\xfd\x13\xa9\xd8\x0b\x46\xfe\x7b\x79\x05\xdf\xdf\xdd\xdd\xc5\x73\x8e\x1b\xff\xfb\xf4\x41\x35\xc2\xb5\xb9\x93\x8a\xc8\x19\xc3\x87\xd2\xf3\x5b\xc4\x0a\xd5\x1b\x84\xc9\x45\x1d\x69\x4e\xff\x72\x55\x70\x1c\x0e\x4b\x13\x02\x36\xc0\xea\x1a\x45\x16\x2d\xba\xac\x42\xf8\x10\xae\xa5\xb8\xff\xe1\xe9\xe9\x88\xe7\x59\x17\xe8\x45\xee\x9a\x38\x36\xfa\x2e\x1e\x1d\xf7\x7e\xd2\xb3\x83\x2d\xe7\xe6\xc4\x52\x8f\x66\xd2\x99\xbe\x03\x67\xe2\xce\xdf\x88\x3c\xfc\x5b\x74\x7d\xb2\xfe\x33\x6c\xc2\x18\x99\xab\x7c\x3a\x2a\xfe\x0a\x00\x00\xff\xff\x8e\x87\x21\xc1\xa2\x0f\x00\x00"),
          path: "mock.tml",
          root: "mock.tml",
        },
      
    
  }
)

//==============================================================================

// FilesFor returns all files that use the provided extension, returning a
// empty/nil slice if none is found.
func FilesFor(ext string) []string {
  return assets[ext]
}

// MustFindFile calls FindFile to retrieve file reader with path else panics.
func MustFindFile(path string, doGzip bool) (io.Reader, int64) {
  reader, size, err := FindFile(path, doGzip)
  if err != nil {
    panic(err)
  }

  return reader, size
}

// FindDecompressedGzippedFile returns a io.Reader by seeking the giving file path if it exists.
// It returns an uncompressed file.
func FindDecompressedGzippedFile(path string) (io.Reader, int64, error){
	return FindFile(path, true)
}

// MustFindDecompressedGzippedFile panics if error occured, uses FindUnGzippedFile underneath.
func MustFindDecompressedGzippedFile(path string) (io.Reader, int64){
	reader, size, err := FindDecompressedGzippedFile(path)
	if err != nil {
		panic(err)
	}
	return reader, size
}

// FindGzippedFile returns a io.Reader by seeking the giving file path if it exists.
// It returns an uncompressed file.
func FindGzippedFile(path string) (io.Reader, int64, error){
	return FindFile(path, false)
}

// MustFindGzippedFile panics if error occured, uses FindUnGzippedFile underneath.
func MustFindGzippedFile(path string) (io.Reader, int64){
	reader, size, err := FindGzippedFile(path)
	if err != nil {
		panic(err)
	}
	return reader, size
}

// FindFile returns a io.Reader by seeking the giving file path if it exists.
func FindFile(path string, doGzip bool) (io.Reader, int64, error){
	reader, size, err := FindFileReader(path)
	if err != nil {
		return nil, size, err
	}

	if !doGzip {
		return reader, size, nil
	}

  gzr, err := gzip.NewReader(reader)
	return gzr, size, err
}

// MustFindFileReader returns bytes.Reader for path else panics.
func MustFindFileReader(path string) (*bytes.Reader, int64){
	reader, size, err := FindFileReader(path)
	if err != nil {
		panic(err)
	}
	return reader, size
}

// FindFileReader returns a io.Reader by seeking the giving file path if it exists.
func FindFileReader(path string) (*bytes.Reader, int64, error){
  item, ok := assetFiles[path]
  if !ok {
    return nil,0, fmt.Errorf("File %q not found in file system", path)
  }

  return bytes.NewReader(item.data), int64(len(item.data)), nil
}

// MustReadFile calls ReadFile to retrieve file content with path else panics.
func MustReadFile(path string, doGzip bool) string {
  body, err := ReadFile(path, doGzip)
  if err != nil {
    panic(err)
  }

  return body
}

// ReadFile attempts to return the underline data associated with the given path
// if it exists else returns an error.
func ReadFile(path string, doGzip bool) (string, error){
  body, err := ReadFileByte(path, doGzip)
  return string(body), err
}

// MustReadFileByte calls ReadFile to retrieve file content with path else panics.
func MustReadFileByte(path string, doGzip bool) []byte {
  body, err := ReadFileByte(path, doGzip)
  if err != nil {
    panic(err)
  }

  return body
}

// ReadFileByte attempts to return the underline data associated with the given path
// if it exists else returns an error.
func ReadFileByte(path string, doGzip bool) ([]byte, error){
  reader, _, err := FindFile(path, doGzip)
  if err != nil {
    return nil, err
  }

  if closer, ok := reader.(io.Closer); ok {
    defer closer.Close()
  }

  var bu bytes.Buffer

  _, err = io.Copy(&bu, reader);
  if err != nil && err != io.EOF {
   return nil, fmt.Errorf("File %q failed to be read: %+q", path, err)
  }

  return bu.Bytes(), nil
}
