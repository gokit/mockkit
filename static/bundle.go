package static


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
)

type fileData struct{
  path string
  root string
  data []byte
}

var (
  assets = map[string][]string{
    
      ".tml": []string{  // all .tml assets.
        
          "impl-only.tml",
        
          "impl.tml",
        
          "mock.tml",
        
      },
    
  }

  assetFiles = map[string]fileData{
    
      
        "impl-only.tml": { // all .tml assets.
          data: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4f\x4b\xc3\x30\x1c\xbd\xe7\x53\xbc\xc3\x0e\x1b\x48\xe6\x59\xf0\xb0\x83\xc2\x40\x65\x88\x5f\x20\xa4\xbf\xb6\x61\x69\x5a\x93\x94\x39\x42\xbe\xbb\x64\x6d\xb6\xd5\x6d\xa8\xc7\x24\xef\xcf\xef\xf7\x1e\x09\x61\xb6\x36\x9e\x6c\x29\x24\xbd\x89\x86\xf0\xf0\x08\x3e\xbd\x89\x91\x85\x30\xdb\x08\xb9\x15\xd5\x09\xb3\xd9\x56\x7c\xbc\x4b\x08\xb6\x5c\x22\x84\x29\x33\xc6\x75\xd3\x69\x14\x54\x2a\x43\x0e\x02\xb2\x35\xd2\x92\x27\x38\x6f\x7b\xe9\xb1\xab\x95\xac\xa1\x9a\x4e\x53\x43\xc6\x3b\xf8\x9a\xd0\x90\xaf\xdb\xc2\xa1\x6c\x6d\x3a\x5f\x17\x86\xca\x67\x8e\x95\xd6\x47\xd2\x4e\x69\x8d\x4e\x18\x25\xef\xe0\x5a\x88\xa2\x80\x21\x49\xce\x09\xbb\x1f\x38\x46\x68\xe8\xb6\x52\x92\x33\xbf\xef\xe8\xd6\xd0\xc3\x84\x81\x01\x40\x08\xb0\xc2\x54\x04\xfe\x3a\xda\xc4\x38\x3e\xf0\x81\xf2\xdc\x1b\x89\xb2\x37\x72\x1e\x02\x7f\xfa\x5a\xd9\xaa\x4f\x0b\xbd\x28\xe7\xe1\x6d\x4f\x38\x8f\x2f\xc6\x05\x06\xdc\x3b\xf9\xde\x9a\x9b\xa8\x6c\x4e\xa6\x48\x8e\x91\xb1\xab\x93\x0c\x01\xe5\x5c\xa6\x61\xfe\xac\x37\x46\x7e\xc4\xce\x17\x63\x6c\x87\xa8\x2f\x91\x29\x07\xce\xd2\x56\x98\x27\xd9\x1b\x90\xc5\xc9\xfd\xaf\xdb\x87\xa0\x4a\x98\xd6\xd3\x67\x2f\x34\xf8\x47\xeb\x85\x1e\xb2\x70\xb8\x47\xd6\xf9\x25\x9d\x10\xc8\x14\x31\xe6\x8a\x54\x09\x6a\x3a\xbf\x07\x1f\x78\x09\xe5\x12\x79\xec\x2a\x6d\xc0\x27\x85\x25\x97\x3c\xeb\x19\x3a\xc7\x4e\xda\xd1\xa9\xe7\x0b\xd1\xf4\x09\xfe\xa9\x69\x0f\x1a\x57\xd5\xb2\x67\xda\x88\xa5\xff\x36\x96\xfe\x1d\x00\x00\xff\xff\x6e\x45\x1c\xc3\x9f\x03\x00\x00"),
          path: "impl-only.tml",
          root: "impl-only.tml",
        },
      
        "impl.tml": { // all .tml assets.
          data: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xbd\x8a\xe3\x30\x10\xee\xf5\x14\x5f\x71\x85\x0d\x87\xd2\x1f\x5c\x91\xe6\x20\x70\xbb\xc5\xbe\x81\x90\xc7\xb1\x40\x1e\x1b\x49\x26\x04\x31\xef\xbe\x28\xb6\x93\x38\x3f\xc5\x96\x1e\x7d\xf3\xfd\x8d\x73\xfe\x75\xe0\x44\xa1\x35\x96\x3e\x4d\x4f\xf8\xf3\x17\x7a\x3b\x11\x51\x6a\xb7\x43\xce\xdb\xb9\xc8\xa1\x1f\x3d\x1a\x6a\x1d\x53\x84\x81\x1d\xd8\x06\x4a\x84\x98\xc2\x64\x13\x4e\x9d\xb3\x1d\x5c\x3f\x7a\xea\x89\x53\x44\xea\x08\x3d\xa5\x6e\x68\x22\xda\x21\x94\xef\xd7\xc4\x70\xeb\xb7\xc6\xde\xfb\xeb\xd2\xc9\x79\x8f\xd1\xb0\xb3\xbf\x11\x07\x98\xa6\x01\x93\xa5\x18\x4d\x38\xcf\x3b\x6c\x3c\xfc\x70\x74\x56\xab\x74\x1e\xe9\x9d\xe9\xd9\x61\x56\x00\x90\x33\x82\xe1\x23\x41\x7f\x2c\x32\x22\xcb\x83\x9e\x57\xfe\x4d\x6c\xd1\x4e\x6c\xab\x9c\xf5\x3e\x1c\xa7\x12\xe7\xbf\x8b\x09\x29\x4c\x24\x52\xa3\x3c\x7c\x51\x9a\x02\xdf\x8f\x57\x7a\xe2\xa6\x70\x8a\x52\x2f\xb5\xe6\x0a\xd6\xe4\xdb\xba\x1e\xcf\x23\xa2\xaf\xd8\xaa\x5e\x8a\xb9\x94\xf9\x8c\x2c\x49\xb5\x2a\xbe\x51\x15\xda\x37\x90\xfa\xa6\xfe\x36\x5f\xce\xae\x05\x0f\x89\xfa\x31\x9d\x51\x3d\x66\xad\xe7\xd5\xe7\x06\x72\x26\x6e\x44\xd6\xa2\x5d\x8b\x99\x61\x81\x16\xd5\x58\xf0\x4b\xe3\xc5\xa5\xde\xd4\x7e\xef\xe8\x0e\xbd\x56\x4b\x3e\xd2\xed\x5a\x4f\xa4\xe5\x67\xfe\x21\x67\xb8\x70\xbc\x64\x5b\x35\x4b\x22\x25\xea\x7a\xd8\xef\x00\x00\x00\xff\xff\x81\x93\x02\x7f\x43\x03\x00\x00"),
          path: "impl.tml",
          root: "impl.tml",
        },
      
        "mock.tml": { // all .tml assets.
          data: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\xdf\x8b\xe3\x36\x10\x7e\x5f\xd8\xff\x61\xee\xe8\x83\x5d\x52\x67\xfb\x7a\x25\x0f\x47\x9b\x85\x42\x6f\x29\xdd\x83\x3e\x2c\x4b\x51\xec\x71\x2c\xd6\x96\x8c\x24\x27\x9b\x0a\xff\xef\x65\x24\x39\xfe\x11\x3b\xec\xb5\x14\xda\xf3\x4b\xf0\x68\x34\x33\xfa\xf4\xcd\x37\xce\xed\x8d\xb5\xdf\xfc\x2c\x0c\xaa\x9c\xa5\xf8\xc0\x2a\x84\x0f\x1b\x48\xc6\x96\xb6\xbd\xbd\x21\x47\x50\x4c\xec\x11\x92\x4f\x68\x0a\x99\x69\x67\x5f\xaf\xc1\xbf\xfe\xc8\xca\xf2\x5e\x2a\x6b\x13\xda\xd3\xb6\x90\x61\xce\x05\x6a\x60\x60\x4e\x35\xc2\xb1\xe0\x69\x01\x85\x2c\x33\x0d\x15\x1a\xf6\x5d\x86\x86\xf1\x52\x03\xdb\xc9\xc6\x80\x29\x10\xf6\xfc\xc0\xc5\x1e\x52\x56\x92\x59\x6b\x99\x72\x66\x30\x73\x49\x8e\xdc\x14\xce\x69\x5a\x6f\xdb\x26\xe7\x9c\x51\x4c\xa1\x0b\x99\x25\xb7\x37\x2e\xe9\x42\x69\xda\xa8\x26\x35\xf6\xf6\x06\x00\xe0\xf7\x02\x05\x18\x5e\x61\xf2\x99\x57\xe8\x6d\x8f\x86\x29\x33\x35\x6e\x45\x36\x34\x79\xe3\x7a\x0d\x3f\x85\x83\xc8\x1c\x6a\x26\x78\x0a\x3c\x07\xdd\xa4\x05\xc8\x34\x6d\x94\x4e\xbc\xe3\xaf\xb4\xf4\x68\x58\xfa\x02\x4f\xcf\xbb\x93\xc1\x81\x79\xab\x94\x54\xc0\xbb\x63\xd9\x76\x10\xfd\xa3\xda\x37\x15\x0a\x03\x07\x56\x36\xd8\x45\xeb\x2f\xe3\xa3\xda\xfb\x9b\xf0\xe6\x94\xd5\xdc\xb0\x92\xff\x89\xd0\x9d\xd6\xda\x64\xfb\xfa\xf9\x54\x63\xef\x85\x22\x6b\x87\x49\x7e\x43\xd3\x28\xb1\x94\xc2\xaf\x7e\x79\x16\x08\x69\x5c\x26\x22\x0a\x33\x69\xd1\x9d\x47\x83\x0a\x61\x8d\x6a\x70\x9d\xb3\x52\x23\x21\x57\x2b\x79\xe0\x19\x2a\x90\xa6\x40\x15\xcd\xdf\x60\x0c\xec\x1c\xc6\x85\xf6\x95\x43\x45\x19\xc0\x14\x5c\x03\xbe\x72\x6d\x88\x4e\xec\x02\xc0\xbc\x11\x29\x44\xd5\x12\x3d\xe2\x49\xa1\x91\xab\x64\xd1\x79\x27\x65\x09\xf6\xea\xb5\xd0\xc3\x73\x78\xa7\x30\x2f\x31\x35\x5c\x8a\xc4\xa5\xd8\x96\x48\x19\xa2\x0a\x93\x39\x4c\x57\x1e\x83\x85\x35\x82\x2d\xb6\x7d\x02\x7a\x3c\xa4\xe0\xc0\xec\x57\x46\x17\x72\x2e\x2a\xf8\x52\x18\x77\x45\x83\xe5\x70\x5f\xd6\x26\x93\x56\xfb\x24\xd3\x97\xf9\xc6\xe6\x55\xed\x0f\x43\x76\xdf\x5f\xe7\x9e\x75\xc1\xaa\x20\x1a\xb9\x54\xa1\x8f\xa7\xc1\x81\x69\xc8\x39\x92\x40\xf8\x98\xac\x2c\xe5\x51\xc3\x49\x36\x1d\x2b\xfa\x34\x8c\x50\xa4\x9e\x73\xc1\x4d\x81\x1a\x81\xee\xd5\x9b\x8d\x3c\xef\xc8\x4b\x7c\xe5\xbb\x12\xc1\xa0\xe3\x43\x27\x0d\x0b\x87\x1b\x49\xc3\xbc\xe4\xf9\x95\x70\x0f\x3d\x2b\x34\x3c\x3d\xcf\x73\xe4\x02\xfe\xeb\x7a\xda\xeb\xd4\x00\xd4\x37\x4b\xdf\x00\xe0\x0b\xef\x8e\xfa\x14\x17\xbe\xbd\x74\x20\x04\xe2\x3e\x7f\x64\x6d\xd2\x75\xc1\x2f\x5c\x1b\xc7\x15\xa2\xfc\x42\x57\xae\x00\x49\xc8\xe2\xae\x1b\x0e\x4c\x39\x31\x5f\x6c\x1e\xcf\x34\x72\xf5\x6e\x89\xd3\xe2\x8d\x57\xd9\x07\x79\x8c\xe2\xd1\xaa\x57\xe5\xcd\xd0\xb9\xdb\xbf\xd0\x78\xc1\x73\x56\xb0\x36\xb0\x7c\x41\x7d\xfd\xb9\x6c\x44\xe6\x7a\xdc\xdb\x08\xdd\x3f\x56\x50\x4b\xad\x89\x55\x74\x22\x9a\x98\x3e\x39\xe1\x9a\xcc\x51\xc3\x8e\x74\x60\xb8\x39\x99\x68\x8d\xaf\x78\xda\xd7\xbe\x8a\x4d\x68\xd6\xe1\xca\xb2\x4a\x0f\x9f\xeb\x38\x8c\xea\x99\xf3\xb9\x48\x39\xc6\x69\x92\x65\x30\xd2\x26\xb1\xfb\x95\xe5\x8d\x7e\x44\xce\x6d\x74\x2b\xe3\x8d\x3b\x85\xec\xe5\x42\xe8\xda\x09\xab\xb6\x1e\xbb\x09\xa9\x78\x1e\x60\x1d\x60\x1d\x34\xd1\xef\x5b\x81\xe0\xe5\x24\xe2\xc4\xc1\xf1\x5d\x27\x0f\x78\x8c\xde\x0b\xe9\xc7\x0f\xcd\x1c\x85\xba\x96\x82\x24\x89\x32\xbc\x8f\x2f\x05\x76\x56\x5e\x1f\x05\xa7\xf9\xf5\xb5\x0a\x6c\x38\xde\xbf\x29\xb1\xe1\xf5\x9e\x64\x8e\xaa\x5d\x96\x30\x6b\x43\xc7\x0c\xcd\xff\x1b\xa5\xf6\x50\xbe\x45\xab\xad\xe5\x39\x08\x69\xb0\xaa\xcd\x09\xa2\xe9\xa1\x63\xbf\xf5\x12\x8a\xf0\x91\xf8\x25\x52\x4e\x8e\x19\xe6\xa8\x3c\xf4\xf1\x58\xf5\x50\x29\xa7\x94\x98\xca\x03\xaa\x28\xfe\xc1\x59\xde\x6d\xa8\xcb\x60\xa2\x77\x46\xb1\xd4\xfd\x13\xa9\xd8\x0b\x46\xfe\x7b\x79\x05\xdf\xdf\xdd\xdd\xc5\x73\x8e\x1b\xff\xfb\xf4\x41\x35\xc2\xb5\xb9\x93\x8a\xc8\x19\xc3\x87\xd2\xf3\x5b\xc4\x0a\xd5\x1b\x84\xc9\x45\x1d\x69\x4e\xff\x72\x55\x70\x1c\x0e\x4b\x13\x02\x36\xc0\xea\x1a\x45\x16\x2d\xba\xac\x42\xf8\x10\xae\xa5\xb8\xff\xe1\xe9\xe9\x88\xe7\x59\x17\xe8\x45\xee\x9a\x38\x36\xfa\x2e\x1e\x1d\xf7\x7e\xd2\xb3\x83\x2d\xe7\xe6\xc4\x52\x8f\x66\xd2\x99\xbe\x03\x67\xe2\xce\xdf\x88\x3c\xfc\x5b\x74\x7d\xb2\xfe\x33\x6c\xc2\x18\x99\xab\x7c\x3a\x2a\xfe\x0a\x00\x00\xff\xff\x8e\x87\x21\xc1\xa2\x0f\x00\x00"),
          path: "mock.tml",
          root: "mock.tml",
        },
      
    
  }
)

//==============================================================================

// FilesFor returns all files that use the provided extension, returning a
// empty/nil slice if none is found.
func FilesFor(ext string) []string {
  return assets[ext]
}

// MustFindFile calls FindFile to retrieve file reader with path else panics.
func MustFindFile(path string, doGzip bool) (io.Reader, int64) {
  reader, size, err := FindFile(path, doGzip)
  if err != nil {
    panic(err)
  }

  return reader, size
}

// FindDecompressedGzippedFile returns a io.Reader by seeking the giving file path if it exists.
// It returns an uncompressed file.
func FindDecompressedGzippedFile(path string) (io.Reader, int64, error){
	return FindFile(path, true)
}

// MustFindDecompressedGzippedFile panics if error occured, uses FindUnGzippedFile underneath.
func MustFindDecompressedGzippedFile(path string) (io.Reader, int64){
	reader, size, err := FindDecompressedGzippedFile(path)
	if err != nil {
		panic(err)
	}
	return reader, size
}

// FindGzippedFile returns a io.Reader by seeking the giving file path if it exists.
// It returns an uncompressed file.
func FindGzippedFile(path string) (io.Reader, int64, error){
	return FindFile(path, false)
}

// MustFindGzippedFile panics if error occured, uses FindUnGzippedFile underneath.
func MustFindGzippedFile(path string) (io.Reader, int64){
	reader, size, err := FindGzippedFile(path)
	if err != nil {
		panic(err)
	}
	return reader, size
}

// FindFile returns a io.Reader by seeking the giving file path if it exists.
func FindFile(path string, doGzip bool) (io.Reader, int64, error){
	reader, size, err := FindFileReader(path)
	if err != nil {
		return nil, size, err
	}

	if !doGzip {
		return reader, size, nil
	}

  gzr, err := gzip.NewReader(reader)
	return gzr, size, err
}

// MustFindFileReader returns bytes.Reader for path else panics.
func MustFindFileReader(path string) (*bytes.Reader, int64){
	reader, size, err := FindFileReader(path)
	if err != nil {
		panic(err)
	}
	return reader, size
}

// FindFileReader returns a io.Reader by seeking the giving file path if it exists.
func FindFileReader(path string) (*bytes.Reader, int64, error){
  item, ok := assetFiles[path]
  if !ok {
    return nil,0, fmt.Errorf("File %q not found in file system", path)
  }

  return bytes.NewReader(item.data), int64(len(item.data)), nil
}

// MustReadFile calls ReadFile to retrieve file content with path else panics.
func MustReadFile(path string, doGzip bool) string {
  body, err := ReadFile(path, doGzip)
  if err != nil {
    panic(err)
  }

  return body
}

// ReadFile attempts to return the underline data associated with the given path
// if it exists else returns an error.
func ReadFile(path string, doGzip bool) (string, error){
  body, err := ReadFileByte(path, doGzip)
  return string(body), err
}

// MustReadFileByte calls ReadFile to retrieve file content with path else panics.
func MustReadFileByte(path string, doGzip bool) []byte {
  body, err := ReadFileByte(path, doGzip)
  if err != nil {
    panic(err)
  }

  return body
}

// ReadFileByte attempts to return the underline data associated with the given path
// if it exists else returns an error.
func ReadFileByte(path string, doGzip bool) ([]byte, error){
  reader, _, err := FindFile(path, doGzip)
  if err != nil {
    return nil, err
  }

  if closer, ok := reader.(io.Closer); ok {
    defer closer.Close()
  }

  var bu bytes.Buffer

  _, err = io.Copy(&bu, reader);
  if err != nil && err != io.EOF {
   return nil, fmt.Errorf("File %q failed to be read: %+q", path, err)
  }

  return bu.Bytes(), nil
}
